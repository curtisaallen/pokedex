{"version":3,"sources":["component/Pokecard.js","helper.js","component/PokeContainer.js","data/pokemons.js","component/Logo.js","App.js","serviceWorker.js","index.js","images/pokemon-go-logo.webp"],"names":["Pokecard","props","react_default","a","createElement","className","item","name","src","concat","id","alt","type","base_experience","helper","chunk","arr","chunkSize","R","i","len","length","push","slice","sum","shuffle","arra1","temp","index","ctr","Math","floor","random","PokeContainer","pokemons","this","pokemonsplayerone","map","component_Pokecard","key","pokemonsplayertwo","playeronecount","playertwocount","React","Component","Logo","logoImg","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","component_Logo","component_PokeContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yNAiBeA,SAfE,SAACC,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,KAAKC,MACfL,EAAAC,EAAAC,cAAA,OAAKI,IAAG,4EAAAC,OAA8ER,EAAMK,KAAKI,GAAzF,QAAoGC,IAAKV,EAAMK,KAAKC,OAC5HL,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,kBADJ,IACkBH,EAAMK,KAAKM,KACzBV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,iBAHJ,IAGiBH,EAAMK,KAAKO,oBCiBpB,IAAAC,EAAA,CAACC,MA3BhB,SAAeC,EAAKC,GAEhB,IADA,IAAIC,EAAI,GACCC,EAAE,EAAEC,EAAIJ,EAAIK,OAAQF,EAAEC,EAAKD,GAAGF,EACrCC,EAAEI,KAAKN,EAAIO,MAAMJ,EAAEA,EAAEF,IACvB,OAAOC,GAuBYM,IApBvB,SAAaR,GAET,IADA,IAAIQ,EAAM,EACDL,EAAI,EAAGA,EAAIH,EAAIK,OAAQF,IAC9BK,GAAOR,EAAIG,GAAGN,gBAEhB,OAAOW,GAeiBC,QAZ5B,SAAiBC,GAEb,IADA,IAAwBC,EAAMC,EAA1BC,EAAMH,EAAML,OACTQ,EAAM,GACTD,EAAQE,KAAKC,MAAMD,KAAKE,SAAWH,GAEnCF,EAAOD,IADPG,GAEAH,EAAMG,GAAOH,EAAME,GACnBF,EAAME,GAASD,EAEnB,OAAOD,ICgBIO,mLAnCA,IACAC,EAAYC,KAAKlC,MAAjBiC,SACHE,EAAoBF,EAAS,GAAGG,IAAI,SAAC/B,EAAMa,GACzC,OAAOjB,EAAAC,EAAAC,cAACkC,EAAD,CAAUhC,KAAMA,EAAMiC,IAAKpB,MAEpCqB,EAAoBN,EAAS,GAAGG,IAAI,SAAC/B,EAAMa,GAC1C,OAAOjB,EAAAC,EAAAC,cAACkC,EAAD,CAAUhC,KAAMA,EAAMiC,IAAKpB,MAEnCsB,EAAiB3B,EAAOU,IAAIU,EAAS,IACrCQ,EAAiB5B,EAAOU,IAAIU,EAAS,IACzC,OACIhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdoC,EAAiBC,EACdxC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,gBAEAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,eAEJH,EAAAC,EAAAC,cAAA,8BAAsBqC,IAErBL,EACDlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdoC,EAAiBC,EACdxC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,gBAEAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,eAEJH,EAAAC,EAAAC,cAAA,8BAAsBsC,IAErBF,UA9BWG,IAAMC,WCOnBV,EAXE,CACb,CAACxB,GAAI,EAAGH,KAAM,aAAcK,KAAM,OAAQC,gBAAiB,IAC3D,CAACH,GAAI,EAAGH,KAAM,WAAYK,KAAM,QAASC,gBAAiB,IAC1D,CAACH,GAAI,GAAIH,KAAM,UAAWK,KAAM,MAAOC,gBAAiB,IACxD,CAACH,GAAI,GAAIH,KAAM,aAAcK,KAAM,SAAUC,gBAAiB,KAC9D,CAACH,GAAI,GAAIH,KAAM,UAAWK,KAAM,WAAYC,gBAAiB,KAC7D,CAACH,GAAI,GAAIH,KAAM,aAAcK,KAAM,SAAUC,gBAAiB,IAC9D,CAACH,GAAI,GAAIH,KAAM,SAAUK,KAAM,SAAUC,gBAAiB,KAC1D,CAACH,GAAI,IAAKH,KAAM,QAASK,KAAM,SAAUC,gBAAiB,qBCJ/CgC,EAFF,SAAA5C,GAAK,OAAKC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAOH,EAAAC,EAAAC,cAAA,OAAKI,IAAKsC,IAASnC,IAAI,mBCsBrDoC,cAhBb,SAAAA,EAAY9C,GAAO,IAAA+C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAd,KAAAY,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAlB,KAAMlC,KACDqD,MAAQ,CACTpB,SAAUpB,EAAOC,MAAMD,EAAOW,QAAQS,GAAW,IAHpCc,wEAOnB,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmD,EAAD,MACArD,EAAAC,EAAAC,cAACoD,EAAD,CAAetB,SAAUC,KAAKmB,MAAMpB,mBAXxBS,IAAMC,WCKJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.f9da9a8b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Pokecard = (props) => {\n  return (\n    <div className=\"Card\">\n      <h2>{props.item.name}</h2>\n       <img src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${props.item.id }.png`} alt={props.item.name} />\n       <p>\n           <b>Type:</b> {props.item.type}\n           <br />\n           <b>EXP:</b> {props.item.base_experience}\n       </p>\n\n    </div>\n  )\n};\n\nexport default Pokecard;\n","function chunk(arr, chunkSize) {\n    var R = [];\n    for (var i=0,len=arr.length; i<len; i+=chunkSize)\n      R.push(arr.slice(i,i+chunkSize));\n    return R;\n}\n\nfunction sum(arr) {\n    let sum = 0;\n    for (var i = 0; i < arr.length; i++) {\n      sum += arr[i].base_experience\n    }\n    return sum;\n}\n\nfunction shuffle(arra1) {\n    var ctr = arra1.length, temp, index;\n    while (ctr > 0) {\n        index = Math.floor(Math.random() * ctr);\n        ctr--;\n        temp = arra1[ctr];\n        arra1[ctr] = arra1[index];\n        arra1[index] = temp;\n    }\n    return arra1;\n}\n\nexport default {chunk, sum, shuffle};","import React from 'react';\nimport Pokecard from './Pokecard';\nimport helper from '../helper';\n\nclass PokeContainer extends React.Component {  \n      render() {\n        const {pokemons} = this.props;\n        let pokemonsplayerone = pokemons[0].map((item, i) => {\n              return <Pokecard item={item} key={i} />;\n        });  \n        let pokemonsplayertwo = pokemons[1].map((item, i) => {\n             return <Pokecard item={item} key={i} />;\n        });\n        let playeronecount = helper.sum(pokemons[0])\n        let playertwocount = helper.sum(pokemons[1])\n        return (\n            <div className=\"container\">\n                <div className=\"header\">\n                {playeronecount > playertwocount ? ( \n                    <h1 className=\"win\">Winning Hand</h1>\n                ) : (\n                    <h1 className=\"lose\">Losing Hand</h1>   \n                )}\n                <p>Total experience: {playeronecount}</p>\n                </div>\n                {pokemonsplayerone}\n                <div className=\"header\">\n                {playeronecount < playertwocount ? ( \n                    <h1 className=\"win\">Winning Hand</h1>\n                ) : (\n                    <h1 className=\"lose\">Losing Hand</h1>  \n                )}\n                <p>Total experience: {playertwocount}</p>\n                </div>\n                {pokemonsplayertwo}\n            </div>\n        )\n      }\n}\n\nexport default PokeContainer;\n","const pokemons = [\n    {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\n    {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\n    {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\n    {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\n    {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\n    {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\n    {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\n    {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\n  ];\n  \nexport default pokemons","import React from 'react';\nimport logoImg from '../images/pokemon-go-logo.webp'\nconst Logo = props => (<div className=\"Logo\"><img src={logoImg} alt='pokemon logo' /></div>);\n  \nexport default Logo;\n  \n","import React from 'react';\nimport './App.css';\nimport PokeContainer from './component/PokeContainer';\nimport helper from './helper';\nimport pokemons from './data/pokemons';\nimport Logo from './component/Logo';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        pokemons: helper.chunk(helper.shuffle(pokemons), 4)\n    };\n  }\n  render() {\n  return (\n    <div className=\"App\">\n      <Logo  />\n      <PokeContainer pokemons={this.state.pokemons} />\n    </div>\n  )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pokemon-go-logo.d43977a6.webp\";"],"sourceRoot":""}